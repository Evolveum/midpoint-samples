<!--
  ~ Copyright (c) 2010-2024 Evolveum
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!--
Task iterate over all security policy objects and build up unique list of the
security question identifiers. In cas the duplicity is found it is announced
in the log with prefix "FOUND DUPLICITY - already used identifier".

After the list is build up all the user objects are iterated for the presence
of the security question answers. In case answer for unknown identifier is
found there it is logged with the prefix "Found invalid answer ". In case the
variable *autoCleanUp* has value true there is build up delta for specific
user object which is processed afterward to clean the invalid answers.

Next to it there is counted the amount of the answers based on the identifiers.
This statistics are logged at the end of task run to the log.

In case *autoCleanUp* is set to false there is not processed any changes. Only
the mentioned logs and aver all statistics are generated. [default state]

There is available variable logPrefix which is used for any log item produced by
the task. It can be used to customization in case you want to post-process the
output from the log.
-->
<task xmlns="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
      xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
      xmlns:org="http://midpoint.evolveum.com/xml/ns/public/common/org-3"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      oid="20241112-cafe-0000-7a53-000000000001">
    <name>Search and cleanup security question answers</name>
    <assignment>
        <targetRef oid="00000000-0000-0000-0000-000000000508" relation="org:default" type="c:ArchetypeType"/>
    </assignment>
    <executionState>runnable</executionState>
    <ownerRef oid="00000000-0000-0000-0000-000000000002" relation="org:default" type="c:UserType"/>
    <activity>
        <work>
            <nonIterativeScripting>
                <scriptExecutionRequest xmlns:s="http://midpoint.evolveum.com/xml/ns/public/model/scripting-3">
                    <s:execute>
                        <s:script>
                            <code>
                                import com.evolveum.midpoint.model.api.ModelExecuteOptions
                                import com.evolveum.midpoint.prism.path.ItemPath
                                import com.evolveum.midpoint.xml.ns._public.common.common_3.SecurityPolicyType
                                import com.evolveum.midpoint.xml.ns._public.common.common_3.SecurityQuestionsCredentialsType
                                import com.evolveum.midpoint.xml.ns._public.common.common_3.UserType

                                Boolean autoCleanUp = false
                                String logPrefix = "SecQTask: "

                                log.info(logPrefix + "Starting the task : {}", taskName)

                                log.info(logPrefix + "Searching for 'active' security Questions @ Security policies")

                                def identifiers = []
                                def idCount = []
                                Integer localCount

                                for (secPol in midpoint.searchObjects(midpoint.queryFor(SecurityPolicyType.class, ". type SecurityPolicyType"))) {
                                    log.info(logPrefix + "Processing : {}", secPol.name?.toString())
                                    localCount = 0
                                    for (secQuestion in secPol.getCredentials()?.getSecurityQuestions()?.getQuestion()) {
                                        localCount += 1
				        if (identifiers.indexOf(secQuestion.getIdentifier()) >= 0) {
                                            log.info(logPrefix + "FOUND DUPLICITY - already used identifier : {}", secQuestion.getIdentifier())
                                        } else {
                                            identifiers.add(secQuestion.getIdentifier())
                                            idCount.add(0)
                                        }
                                    }
                                    log.info(logPrefix + "There has been found {} security question(s).", localCount.toString())
                                }
                                if (identifiers.size() > 0) {
                                    log.info(logPrefix + "Current unique identifiers ({} in total) :\n{}", identifiers.size().toString() ,identifiers.join("\n"))
                                }

                                log.info(logPrefix + "Searching for answers on User objects...")

                                def deltas
                                SecurityQuestionsCredentialsType secQ

                                for (user in midpoint.searchObjects(midpoint.queryFor(UserType.class, ". type UserType"))) {

                                    deltas = null
                                    secQ = user.getCredentials()?.getSecurityQuestions()
                                    if (!secQ) continue
                                    for (secAnswer in secQ.getQuestionAnswer()) {
                                        int answerIndex = identifiers.indexOf(secAnswer.getQuestionIdentifier())
				    if (answerIndex >= 0) {
                                            idCount[answerIndex] += 1
                                        } else {
                                            log.info(logPrefix + "Found invalid answer : {} @ {} ( {} )", secAnswer.getQuestionIdentifier(), user.oid, user.name.toString())
                                            if (autoCleanUp) {
                                                if (deltas == null) {
                                                    deltas = midpoint.deltaFor(UserType.class)
                                                }
                                                deltas = deltas.item(ItemPath.fromString('credentials/securityQuestions/questionAnswer'))
                                                        .delete(secAnswer.clone())
                                            }
                                        }
                                    }

                                    if (autoCleanUp) {
                                        if (deltas) {
                                            deltas = deltas.asObjectDeltas(user.getOid())
                                            log.info(logPrefix + "Processing changes for : {} ( {} )", user.name?.toString(), user.oid)
                                            midpoint.executeChanges(deltas, ModelExecuteOptions.getRaw())
                                        }
                                    }
                                }

                                log.info(logPrefix + "User objects have been checked ...")

                                if (identifiers.size() == 0) {
                                    log.info(logPrefix + "No security question has been found...")
                                } else {
                                    String listOut = ""
                                    Integer step = 0
                                    Integer listSize = identifiers.size()
				    while ((listSize - step) > 0) {
                                        listOut += "\n" + identifiers[step] + ":" + idCount[step]
                                        step += 1
                                    }
                                    log.info(logPrefix + "Security question identifiers and answer counts:{}", listOut)
                                }

                                log.info(logPrefix + "End of the task : {}", taskName)
                            </code>
                        </s:script>
                    </s:execute>
                    <s:input>
                        <s:value xmlns:xsd="http://www.w3.org/2001/XMLSchema" xsi:type="xsd:string">One time processing</s:value>
                    </s:input>
                    <s:variables>
                        <s:variable>
                            <s:name>taskName</s:name>
                            <s:expression>
                                <path>$task/name</path>
                            </s:expression>
                        </s:variable>
                    </s:variables>
                </scriptExecutionRequest>
            </nonIterativeScripting>
        </work>
    </activity>
</task>
