<!--
  ~ Copyright (c) 2010-2021 Evolveum
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!--

On a system with 500 users; we get 16 buckets with 31 objects.
A worker with 3 threads processes one bucket in 310/3 = 103 seconds.
So all users should be processed in cca 4*103 seconds.

-->

<task xmlns="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
      xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
      xmlns:s="http://midpoint.evolveum.com/xml/ns/public/model/scripting-3"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <name>Script users (multinode)</name>
    <ownerRef oid="00000000-0000-0000-0000-000000000002"/>
    <executionState>runnable</executionState>
    <activity>
        <work>
            <iterativeScripting>
                <objects>
                    <type>UserType</type>
                </objects>
                <scriptExecutionRequest>
                    <s:action>
                        <s:type>execute-script</s:type>
                        <s:parameter>
                            <s:name>script</s:name>
                            <c:value xsi:type="c:ScriptExpressionEvaluatorType">
                                <c:code>
                                    log.info('Hello {} (wait starting)', input)
                                    try {
                                        Thread.sleep(10000)
                                    } catch (InterruptedException e) {
                                        log.error('Got InterruptedException, stopping waiting', e)
                                    }
                                    log.info('Hello {} (wait done)', input)
                                </c:code>
                            </c:value>
                        </s:parameter>
                    </s:action>
                </scriptExecutionRequest>
            </iterativeScripting>
        </work>
        <distribution>
            <buckets>
                <oidSegmentation>
                    <depth>1</depth>
                </oidSegmentation>
            </buckets>
            <workers>
                <workersPerNode>
                    <count>4</count>
                </workersPerNode>
            </workers>
            <workerThreads>2</workerThreads>
        </distribution>
    </activity>
</task>
