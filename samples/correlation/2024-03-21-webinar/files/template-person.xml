<objectTemplate xmlns="http://midpoint.evolveum.com/xml/ns/public/common/common-3" xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3" xmlns:icfs="http://midpoint.evolveum.com/xml/ns/public/connector/icf-1/resource-schema-3" xmlns:org="http://midpoint.evolveum.com/xml/ns/public/common/org-3" xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3" xmlns:ri="http://midpoint.evolveum.com/xml/ns/public/resource/instance-3" xmlns:t="http://prism.evolveum.com/xml/ns/public/types-3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" oid="00000000-0000-0000-0000-000000000380" version="1">
    <name>Person Object Template</name>
    <description>Object template for Person users, contains mappings to generate fullName and username. Please enable appropriate mappings as needed.</description>
    <iterationSpecification>
        <maxIterations>999</maxIterations>
        <tokenExpression>
            <description>The iteration starts with empty string, then a number is appended, starting with 2 (skipping 1), 3, ... up to 99.</description>
            <documentation>Example, how the iteration could look like if `jsmith` username is already taken:

                . jsmith
                . jsmith2
                . jsmith3
                . ... up to jsmith99

                If even `jsmith99` cannot be used because it already exists, the attempt to create user in midPoint will fail.

                `maxIterations` can be updated.

                Also, the script can be updated to prepare iterationToken variable in a different way.

                E.g. iterationToken can be created as '02' instead of just '2'. Or a random number instead of a sequential iterator can be used.</documentation>
            <script>
                <code>if (iteration == 0) {
                        return ""
                    } else {
                        // for 8+2 naming convention, we might want to use %02d instead
                        //return sprintf("%02d", iteration+1)
                        return iteration + 1
                    }</code>
            </script>
        </tokenExpression>
    </iterationSpecification>
    <item>
        <ref>givenName</ref>
        <multiSource/>
    </item>
    <item>
        <ref>familyName</ref>
        <multiSource/>
    </item>
    <item>
        <ref>extension/dateOfBirth</ref>
        <multiSource/>
    </item>
    <item>
        <ref>extension/nationalId</ref>
        <multiSource/>
    </item>
    <item>
        <ref>personalNumber</ref>
        <multiSource/>
    </item>
    <item>
        <ref>locality</ref>
        <multiSource/>
    </item>
    <mapping id="1">
        <name>generate-name-jsmith-8-2</name>
        <description>Generate unique login name using jsmith and iterator suitable for sAMAccountName (8 + up to 2 characters). Does not change the login name when user is renamed. Example: John Smith-Baker, jsmithba or jsmithba2</description>
        <documentation>Generate a login based on "jsmith" convention. Maximum length of login is 10 characters (8 + up-to 2-digit iterator).

            If the login is not unique, a number 2-99 is appended.

            Example:

            * First name: Juan-Carlos
            * Last name: de la    Garcia
            * Returns: jdelagar (normalized, spaces trimmed, shortened to 8)

            This algorithm can be further improved, e.g. to remove "von", "von der", "van", "van der", "de la" from lastName before doing normalization.</documentation>
        <lifecycleState>active</lifecycleState>
        <strength>weak</strength>
        <source>
            <path>givenName</path>
        </source>
        <source>
            <path>familyName</path>
        </source>
        <expression>
            <script>
                <code>tmpGivenName = basic.trim(basic.norm(basic.stringify(givenName)))
                    tmpFamilyName  = basic.trim(basic.norm(basic.stringify(familyName)))
                    tmpGivenNameInitial = tmpGivenName?.take(1) // safe even with empty firstName (but not null)
                    return (tmpGivenNameInitial + tmpFamilyName?.replaceAll(" ", ""))?.take(8) + iterationToken // no spaces</code>
            </script>
        </expression>
        <target>
            <path>name</path>
        </target>
    </mapping>
    <mapping id="2">
        <name>generate-fullname</name>
        <description>Generate fullName (enforcing on renames because of strong mapping)</description>
        <strength>strong</strength>
        <source>
            <path>givenName</path>
        </source>
        <source>
            <path>familyName</path>
        </source>
        <expression>
            <script>
                <code>basic.concatName(givenName, familyName)</code>
            </script>
        </expression>
        <target>
            <path>fullName</path>
        </target>
    </mapping>
    <multiSource>
        <defaultAuthoritativeSource>
            <expression>
                <script>
                    <code>
                        import com.evolveum.midpoint.util.MiscUtil

                        def RESOURCE_SIS_CAMPUS_1_OID = '1d622f56-9f0c-467f-be1b-b2f502c08cd5'
                        def RESOURCE_SIS_CAMPUS_2_OID = '851b6547-8288-4f32-96a6-5bb1f2a256fe'
                        def RESOURCE_SIS_CAMPUS_3_OID = '5fdb1f69-a331-4cb8-884b-7e97baba94de'

                        if (identity == null) {
                            return null
                        }

                        def sources = identity
                                .collect { it.source }
                                .findAll { it != null }

                        def campus1 = sources.find { it.resourceRef?.oid == RESOURCE_SIS_CAMPUS_1_OID }
                        def campus2 = sources.find { it.resourceRef?.oid == RESOURCE_SIS_CAMPUS_2_OID }
                        def campus3 = sources.find { it.resourceRef?.oid == RESOURCE_SIS_CAMPUS_3_OID }

                        MiscUtil.getFirstNonNull(campus1, campus2, campus3)
                    </code>
                </script>
            </expression>
        </defaultAuthoritativeSource>
    </multiSource>
    <correlation>
        <correlators>
            <items>
                <name>name-date-id</name>
                <item>
                    <ref>familyName</ref>
                </item>
                <item>
                    <ref>extension/dateOfBirth</ref>
                </item>
                <item>
                    <ref>extension/nationalId</ref>
                </item>
                <composition>
                    <weight>1.0</weight>
                </composition>
            </items>
            <items>
                <name>names-date</name>
                <item>
                    <ref>givenName</ref>
                    <search>
                        <fuzzy>
                            <levenshtein>
                                <threshold>1</threshold>
                                <inclusive>true</inclusive>
                            </levenshtein>
                        </fuzzy>
                    </search>
                </item>
                <item>
                    <ref>familyName</ref>
                    <search>
                        <fuzzy>
                            <levenshtein>
                                <threshold>1</threshold>
                                <inclusive>true</inclusive>
                            </levenshtein>
                        </fuzzy>
                    </search>
                </item>
                <item>
                    <ref>extension/dateOfBirth</ref>
                </item>
                <composition>
                    <weight>0.4</weight>
                </composition>
            </items>
            <items>
                <name>id</name>
                <item>
                    <ref>extension/nationalId</ref>
                </item>
                <composition>
                    <weight>0.4</weight>
                </composition>
            </items>
        </correlators>
    </correlation>
</objectTemplate>
